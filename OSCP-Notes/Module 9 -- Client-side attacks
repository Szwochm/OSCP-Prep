# 11 Client-side attacks
Most initial footholds are obtained by credential attacks and phishing attacks.

When we leverage client-side attacks in penetration tests, we must also consider the moral aspect of targeting users.
Our goal should not only be to obtain code execution on their system.
It is also to not overstep any ethical or legal boundaries such as blackmailing employees or impersonating the police.

Client systems are rarely exposed publically. Access can be gained with malicious attachments, websites, USB dropping, etc

It has become increasingly difficult to deliver payloads via email due to spam filters, firewalls,
and other security technologies scanning emails for links and attachments.

.lnk shortcuts can point to malicious resources

JScript executed via Windows Script host has been noted as a potential vector


## 11.1. Target Reconnaissance

Before executing a client side attack, identify potential users. Target and gather information about OS and installed software.

### 11.1.1 Information Gathering

metadata tags of publicaly-available documents may clue you into which verions of adobe, word, etc is being used,

Google Dork to Find pdfs hosted on a website
site:example.com filetype:pdf 

Exiftool displays metadata of basically every common filetype. There's a list on the website

exiftool -a -u brochure.pdf
-a: display duplicated tags
-u display unknown tags

offsec's client-side content was written in 2022

Author name can show employee names

11.1.2 Client Fingerprinting

We can use canary tokens to get info on clients

HTA applications -- attachments that can execute code. Only work in internet explorer and to some extent microsoft edge. Still very commonly used today

pretext - the social engineering concept of coming up with a scenario to trick someone into clicking on a link or opening a document

A webhook is one way for an pplication to sent real-time update to another app when a specific event happens. We can use these in canary tokens with links, attachments, pdfs jpgs, etc.

11.2. Exploiting Microsoft Office

This Learning Unit covers the following Learning Objectives:

Understand variations of Microsoft Office client-side attacks
Install Microsoft Office
Leverage Microsoft Word Macros

11.2.1. Preparing the Attack

Using an attachment in an email for the attack isn't going to cut it. Too much awareness and mitigations are implemented. 

Files downloaded from email or links are marked with MOTW (Mark of the Web) -- This opens them in protected mode. A target must be convinced to "Enable editing" for macros to execute.

An attacker can blur the rest of the document and say that the user has to Enable Editing to trick them into clicking it...

There are some macro programs that do not have a protected view such as Microsoft Publisher.

If you see "Learn more" instead of "Enable content", files have to be unblocked using the macro unblock checkbox

Even with all of these hoops, macro attacks are still a very common client-side attack

11.2.3 Leveraging Microsoft Word Macros

Macro - series of commands and instructions to programatically achieve a task

Macros can be written in Visual Basic for Applicatons (VBA). VBA is powerful and has access ActiveX objects and Windows Script Host.
This is similar to Javascript in HTML applications

Attack vectors such as [Dynamic Data Exchange] (DDE) and [Object Linking, and Embedding] (OLE) are old and will probably fail without you configuring the target system prior.

Saving a Macro as a .docx requires attaching a containing template.
This means that macros are not persistant. They can be run but cannot be embedded or saved into the document.
This can be bypassed by just saving it as .doc or .docm

Macros can be created from the View tab -> Macros

Body of the macro is between "Sub" and "End Sub"

Subs are similar to functions, but cannot be used in expressions they do not return values. In other words, no Answer = MyMacro() + 1

ActiveX Objects can be leveraged to provide access to system commands. WScript via Windows Script Host Shell object will achieve this.

instantiate a Windows Script Host Shell object with CreateObject:
  CreateObject("Wscript.Shell").Run "powershell"

Macros do not execute automatically, we need to use pre-made macro AutoOpen and event Document_Open
Note: Both cover special cases which the other one doesn't and therefore we use both
<Start of macro, do not paste>
Sub AutoOpen()

  MyMacro
  
End Sub

Sub Document_Open()

  MyMacro
  
End Sub

Sub MyMacro()

  CreateObject("Wscript.Shell").Run "powershell"
  
End Sub
<End of Macro, do not paste>

's are single-line comments in VBA

Remember that for macros to run the user has to Enable Content. Create a pretext to trick them

Next, base64-encoded powershell download cradle to download powercat and start reverse shell.

NOTE:VBA has a 255-character limit for literal strings and therefore, we can't just embed the base64-encoded PowerShell commands as a single string.
Resolution: Create a variable, and concatenate commands together


Extra Reading

11.2

https://attack.mitre.org/techniques/T1553/005/
Mark of the web can be bypassed. A compressed folder may be marked, but its contents may not.
MOTW is a NTFS, feature and does not support NTFS alternative data streams.
A NTFS data stream is similar to a pipe. (Pipes are used for inter-process communication, streams are just how the files are stored.)
Most files only have a main stream for reading and writing to a file, but can have alternate streams. These alternate streams can be used to bypass motw.

https://support.office.com/en-us/article/what-is-protected-view-d6f09ac7-e6b9-4495-8e43-2bbcdbcb6653

https://techcommunity.microsoft.com/t5/microsoft-365-blog/helping-users-stay-safe-blocking-internet-macros-by-default-in/ba-p/3071805

https://learn.microsoft.com/en-us/deployoffice/security/internet-macros-blocked

https://support.microsoft.com/en-us/topic/a-potentially-dangerous-macro-has-been-blocked-0952faa0-37e7-4316-b61d-5b5ed6024216

11.1.2 Client Fingerprinting

https://en.wikipedia.org/wiki/Device_fingerprint 

https://github.com/laramies/theHarvester 

https://msdn.microsoft.com/en-us/library/ms536496(VS.85).aspx 

https://thehackernews.com/2021/04/lazarus-apt-hackers-are-now-using-bmp.html 

https://canarytokens.com 

https://www.imperva.com/learn/application-security/pretexting/ 

https://canarytokens.org/generate

https://developers.whatismybrowser.com/useragents/parse/

https://grabify.link/

https://github.com/fingerprintjs/fingerprintjs

11.1.1. Information Gathering

https://exiftool.org/TagNames/ 
	- list of supported formats by exif

https://exiftool.org/#Tag Groups
	- more information on what is supported by exif

https://github.com/OJ/gobuster
	- tool

11. Client-side Attacks

https://www.verizon.com/business/resources/reports/2022/dbir/2022-data-breach-investigations-report-dbir.pdf
	- link to request a data breach report investigation

https://support.microsoft.com/en-au/windows/protect-yourself-from-phishing-0c7ea947-ba98-3bd9-7184-430e1f860a44
	- no notes
https://www.tripwire.com/state-of-security/featured/does-dropping-malicious-usb-sticks-really-work-yes-worryingly-well/
	- no notes
https://en.wikipedia.org/wiki/Watering_hole_attack
	- no website should be considered safe.

https://en.wikipedia.org/wiki/JScript
	- microsofts version of Javascript. used mostly in internet explorer. Functions the same as Javascript
	- version 11 is available for Windows 11 verison 24H2. Some references to Edge as well.

https://en.wikipedia.org/wiki/Windows_Script_Host
	- cant pinpoint the exact relationship between JScript and WSH
	- Available Script engines -- basically every programming language has a scripting engine available and its own extension
	- most commonly used are VBScript, JScript, PythonScript, PerlScript, ActivePHPScript, and ooRexxScript


https://docs.microsoft.com/en-us/windows/client-management/windows-libraries 
