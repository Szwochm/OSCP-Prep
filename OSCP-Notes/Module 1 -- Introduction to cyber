Note: Starting with section 3.4.1, I have created an extra section for all the various links Offsec provides throughout the reading. Links will be under their relevant section as well as the Extra reading section
# 3. Intro to Cyber

## 3.1 The Practice of Cybersecurity [x]

### 3.1.1 Challenges in Cyber Security [x]

Key topics

reasoning under uncertainty -- We will never know every single detail. Using experience and our tools we have to use our best judgement to select the best path ahead. "Predictions based on incomplete data"

The enemy is human -- Offsec says that our enemy (and allies) is human... I'm not sure I agree with that anymore.

Cyber security poses dynamic challenges. To beat these challenges we will have to adapt our mindsets


### 3.1.2 A word on Mindsets [x]

Bruce Schneier - The Security Mindset - https://www.schneier.com/blog/archives/2008/03/the_security_mi_1.html

Excerpt from above link that explains it really well
""Security requires a particular mindset. Security professionals—at least the good ones—see the world differently.
They can’t walk into a store without noticing how they might shoplift. 
They can’t use a computer without wondering about the security vulnerabilities. 
They can’t vote without trying to figure out how to vote twice. They just can’t help it."

OSCP - Try Harder Mindset - https://www.offsec.com/blog/what-it-means-to-try-harder/
Step 1: Figure out why or how a particular approach is failing. This will lead to new approaches and new ideas.
Step 2: Patience "Try again"
Step 3: Creativity -- Not a stab in the dark, "Try differently"
Step 3: Perceptivity -- "Try smarter"

### 3.1.3 Emulating the minds of our Opponenets [x]

"How might an attacker gain access?"
"What can they do with that access?" -" What are the worst possible outcomes from an attack?"

## 3.2 Threat and Threat Actors [x]

### 3.2.2 Threats and Threat Actors [x]
This covers more of stuff you would see an in interview, things like the difference between a risk, threat and vulnerability

risk: the probability that a negative event will occur, and the impact on something we value if such an event happens.
threat: Someone or thing poses a risk
vulnerability: Some flaw or weakness existing
exploit: the usage of a vulnerability or something that takes advantage of a vulnerability
attack surface: all the points of contact on our system or network that could be vulnerable to exploitation
attack vector: specific vulnerability and exploitation combination that can further a threat actor's objectives.

A way to interpret risks (this is commonly used in IT to triage service requests)

Low-probability, low impact events
Low-probability, high impact events
High-probability, low impact events
High-probability, high impact events

They talk about Log4J briefly

### 3.2.3 Threat Actor Classifications [x]
This section just defines and gives examples of the following... feel like the below is all I can add to my notes without violating copyrights

Individuals
Malicious groups
Insider
Nation States

## 3.3 The CIA Triad [x]

Talks about the CIA triad -- one interesting thing they mentioned is that each aspects of the triad may be a potential goal to attack. Never thought of it this way!

The most important aspect of the triad depends on the overall goal of the company / person that is maintaining it...

My example 1: A CIA spy's must importat aspect would be Confidentiality... Information that is garbled or unaccessible can be a problem, but for example a Nation state reading the contents is vastly more dire.
My example 2: An emergency system / dispatch most important aspect would be Availability on the other hand... You don't want strangers reading whats happening at another area, but it being available is much more important

### 3.3.1 Confidentiality [x]
"A system is Confidential if the only people who can access it are the people explicitly permitted to do so."

Two examples of attacks on confidentiality

 Network eavesdropping (https://en.wikipedia.org/wiki/Network_eavesdropping
  - Most dangerous for industries that rely on collection and storing data

 Credential Stuffing (https://en.wikipedia.org/wiki/Credential_stuffing)
  - Literally just re-using found credentials to try to get into other accounts. They use the mapping or pairing of user names and passwords. In otherwords, they don't brute force every username with every password, they keep the pairs together and just try them all
  - 2% hit rate globally

### 3.3.2 Integrity [x]
Integrity - Only the information and functionality that is intended to be stored, is stored
  - Example of attack on integrity is Arbitrary code execution

Whisper Gate 
  Microsoft (https://www.microsoft.com/en-us/security/blog/2022/01/15/destructive-malware-targeting-ukrainian-organizations/)
  CrowdStrike (https://www.crowdstrike.com/blog/technical-analysis-of-whispergate-malware/)
  - Virus pretends to be ransomware but actually just overwrites data at given offsets so recovery is impossible
  - Overwrites the MBR
  - Similar to NotPetya which also targeted Ukraine

### 3.3.3 Availability [x]
"A system is considered Available if the people who are supposed to access it can do so"
Examples - DDOS
Talks about Via Sat

### 3.3.4 [x]
Lab questions, nothing further

## 3.4.1 Security Principles [x]
5 Elements of Zero Trust 
 - Just in Time Access (Example, think maintainance windows given to work on a quarantined system)
 - Just Enough Access (Example, A PC tech can install some white listed programs but not every program)
 - Dynamic Access Control (Examples: Users can only use network devices during office hours, user must have had a request prior to doing something, etc)
 - Microsegmentation
 - tokenization and encrpytion to protect data

# 3.4.2
There is a lot of balancing that needs to be done depending on the goal. Security controls can be expensive, and cause DOS if a security mechanism becomes unavailable.


Security Controls https://csrc.nist.gov/glossary/term/security_control
Kerberos https://web.mit.edu/kerberos/

# 3.4.3 Shift-Left Security

Basically they just talk about the idea of building applications with security from the very start instead of trying to add it on after the fact.
https://devopedia.org/shift-left

# 3.4.4 Administrative Segmentation

Basically in the situation that a privileged account becomes compromised in some way (Either the user becomes malicious or somehow the creds are leaked, etc) this helps reduce the damage
"Seperation of Duties"
Split controls between app teams, admins. Maybe even split controls between multiple admins using Shamir's Secret Sharing.

https://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing
Imagine the movie scenes where you need 2-3 people with keys to turn the key at the same time to gain entrance to a secret bunker.
No one person has root credentials

# 3.4.5 Threat Modeling and Threat Intelligence

Threat Modeling - Basically seeing how our network does with trending attacks.

Threat Intelligence - Based on the data from Threat Modeling, what actions can be taken to reduce these risks / threats?
  There is an adversary using x technique, that would work on the organization.
  This adversary may actually target this organization next

# 3.4.6 Table-Top Tactics

Table top - A Discussion between engineers, security and investors about how an organization should react to situations
  - One goal is educating all teams on the TTPS for various scenarios. (If everyone knows the plan, we can react much faster to an incident)

# 3.4.7 Continous Patching and Supply Chain Validation

Continuous supply chain validation happens by both the vendor and the consumer
Can extend past software -- Does the router you bought have a backdoor installed?

SBOM - Software Bill of Materials
  - Used to track dependencies
  - Helps evaluate supply chain tampering

# 3.4.8 Encryption

Doesn't solve every problem but adds one more layer of defense to security

Not all encrypted data is decrypted
  - Example of TLS. Decryption keys only exist in memory for a brief time beforeb being discarded.

# 3.4.9 Logging and Chaos Testing

Basically just creating a realistic scenario on a test network and seeing how it handles it
Often uses cloud and autoomation

# 3.5.1 Laws and Regulations

Hippa
 Enacted in 1996
Privacy Rules - sets limits on what information can be shared without consent
   https://www.hhs.gov/hipaa/for-professionals/privacy/laws-regulations/index.html
   HealthPlans (notes for hippa are all from the link not the course) (I should read more once my lab time expires)
    Not all health care data is covered by hippa
      - Health plans with less than 50 people payed and maintained by employer
      - Government program plans who primary PURPOSE is not providing or paying cost of health care
      - Gov plans whose primary ACTIVITY is directly providing health care
      - Certain insurances do not apply like automobile (What if you have an accident and have to go to the hospital), worker's compensation
    
    Health Care Providers
      - Every provider is covered under hippa
Security Rule - how electronic PHI must be protected
https://www.hhs.gov/hipaa/for-professionals/security/laws-regulations/index.html

Three classes of safeguards
  Administrative
  Security Managment Process
  Physical

FERPA 1974 -- For Schools
   - Protect the students. Failure to comply will lead to loss of Federal Funding

  https://studentprivacy.ed.gov/faq/what-ferpa
  https://www.cdc.gov/phlp/publications/topic/ferpa.html

GLBA -- Financial instituions https://www.fdic.gov/resources/bankers/affordable-mortgage-lending-center/glba.html

GDPR -- EU laws for data privacy and security
https://gdpr.eu/what-is-gdpr/
https://eur-lex.europa.eu/legal-content/EN/LSU/?uri=uriserv:OJ.L_.2016.119.01.0001.01.ENG

Key Disclosure Laws - laws that force people to give crypto keys or passwords in some situations (Usually criminal)
RIPA - UK law that forces disclosure of keys if it is a matter of national security or child indecency
CCPA - California law allowing for right to know how data is used, right to delete private data (sometimes businesses can decline)

#3.5.2 Standards and Frameworks

PCI DSS
https://docs-prv.pcisecuritystandards.org/PCI%20DSS/Supporting%20Document/PCI_DSS-QRG-v3_2_1.pdf
Standards for credit card company data
  - no defaults are allowed for pins, passwords, etc

CIS TOP 18
https://www.cisecurity.org/controls/cis-controls-list
https://www.cisecurity.org/controls/implementation-groups
CIS recommendations of 18 controls to increase security posture

NIST
https://www.nist.gov/industry-impacts/cybersecurity-framework
https://www.nist.gov/cyberframework/getting-started
https://www.nist.gov/cyberframework/online-learning/components-framework

ATT&CK D3FEND
https://www.mitre.org/
https://attack.mitre.org/
https://d3fend.mitre.org/

ISA/IEC 62443 -- Industrial Automation Systems
https://www.rockwellautomation.com/en-us/capabilities/industrial-automation-control.html

Cyber Kill Chain
https://www.crowdstrike.com/cybersecurity-101/cyber-kill-chain/

FedRAMP -   United States program that provides a standardized security framework for cloud services used by the federal government
https://www.fedramp.gov/program-basics/
https://csrc.nist.gov/pubs/sp/800/53/r4/upd3/final
https://www.gsa.gov/technology/government-it-initiatives/fedramp

# 3.5.3 Anatomy of Cyber

# 3.6 Career Opportunities in Cyber

This is kind of copyright, but at the same time half of it is an ad for their courses so hopefully they don't get mad. I just don't have the time to read all of this right now but this seems like good information
There's another area we can usefully consider to have important cybersecurity activities, and that's the folks involved in the Build part of the lifecycle. Designing and implementing security during build is the most efficient way of doing security. let's check out some of the roles that might include cybersecurity.

Enterprise Security Architect. Many large organizations will have one or more Enterprise Security Architect (ESA) positions, either in the cyber security team or the architecture team. This role involves understanding the business activities and building the models which associate security solutions to security services which support the business. Individuals with a deep, cutting-edge understanding of on-premise and cloud computing who enjoy developing high-level business strategies and excel at communicating technical concepts across business areas may enjoy this role.

Cloud Architect. A Cloud Architect is a specialist architecture role responsible for designing and overseeing the implementation of a cloud-computing strategy aligned with the business's goals and needs, and this role will include or may specialize in cloud security. OffSec's CLD-100 offers more information about important cloud concepts and technologies. It teaches learners how to build clouds safely and secure these technologies. This career may be a good fit for someone who enjoys programming and building infrastructure and has experience with cloud service providers and other cloud-related technologies.

Security Solution Architect. The Security Architect (SA) develops high level architectural solutions for application security, ensuring the security architecture for the solution is aligned with the enterprise security architecture. This role isn't involved with specific security or IT products, but focuses on development of a generic security model suitable for specifying security requirements for products. It's a good fit for someone with a wide knowledge of the types of security solutions that are available and can build application-driven security models.

Security Designer. A Security Designer is responsible for designing, building and in many cases maintaining the cyber defense structures for applications and the IT infrastructure. There are similar roles in the security assurance team but these are not responsible for carrying out design work, instead they review and approve security design work carried out by external suppliers or internal development teams. A Cloud Engineer is a specialist designer responsible for designing, building and maintaining the cloud infrastructure.

Developer: A Software Developer is responsible for writing computer programs which, depending on the precise role, may range from core operating system components to desktop, mobile, and web applications. Someone who enjoys designing elegant and efficient programmatic solutions to problems may enjoy this role. Depending on the type of software development, the OffSec Library contains a considerable number of resources to help learners understand attack vectors and create secure software. A general understanding of software vulnerabilities is available in the PEN-200 course, while information about web development can be found in OffSec's WEB courses at the 200 and 300 levels. Those who may be programming in memory-unsafe languages such as C may be interested in the EXP-301 and EXP-312 courses.

DevSecOps: DevSecOps (an abbreviation for Development, Security, and Operations) is an approach to software development that integrates security into all stages of the software development lifecycle, rather than postponing it to the end. A DevSecOps Engineer is responsible for automating security testing and other security-related processes. This role might be a good fit for someone who has an understanding of the Continuous Integration/Continuous Development (CI/CD) pipeline and tools, an interest in security testing automation, and the ability to work in a fast-paced environment.

The OffSec Library contains a considerable number of resources that can help learners with software development, including understanding the different attack vectors to automate testing for and the types of automation testing tools available. This information can be found in the WEB and PEN courses at the 200, and 300 level. CLD-100 also provides details about Docker and Kubernetes: two essential tools for DevSecOps.

Site Reliability Engineer: A Site Reliability Engineer is responsible for ensuring and improving the availability and performance of software systems. A person may wish to be a Site Reliability Engineer if they have software development experience and are interested in using automation to monitor for, alert, and respond to reliability-related issues. learners can learn about containers and Kubernetes, some of the key technologies used to support SRE, by following CLD-100 in the OffSec library.

System Hardener (System Administrator): A System Hardener is responsible for configuring systems to reduce their security risk. This involves changing insecure default configurations, removing unused programs, ensuring firewalls are appropriately restrictive, etc. A person may seek out this career if they have experience with system administration, are familiar with attack techniques, and enjoy making systems and the data they store more secure. Many of the skills required for this position are covered in the PEN track at the 100, 200 and 300 levels. PEN-100, for instance, explores some of the basics of networking and system administration. PEN-200 describes some of the common techniques that attackers use. PEN-300 teaches more advanced techniques that attackers use to bypass defenses.

3.6.4. Additional Roles

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><
Extra Reading   
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><


3.4.1
Security Principals
https://dwheeler.com/secure-programs/Secure-Programs-HOWTO/follow-good-principles.html
List given by Saltzer [1974] and later Saltzer and Schroeder [1975]. Who are these nerds, and why does it matter what they think? These guys wrote the internet standards IEEE
 - Least Privilege
 - Simplicity / Kiss
 - Open Design (More eyes to find vulns, transparancy to the end-user)
 - Complete Mediation - Mechanisms to check every single access attempt, and in a way that these mechanisms cannot be bypassed.
 - Fail safe Defaults - Think about a Deny Deny rule on a firewall as the default.
 - Separation of privilege 
 - Least Common Mechanism - minimize amount and use of shared mechanisms. 
 - Psycholigocal Acceptability / Ease to use - basically if the security sucks (in an inconvenient way), users will find ways to bypass it

https://cheatsheetseries.owasp.org/cheatsheets/Secure_Product_Design_Cheat_Sheet.html#security-principles
 Note: I will only cover the new principals unless this resource describes it in an novel way. 
 - Separation of duties (privilege) -- System of chceks and balances to ensure no single individual has control over all aspects of a transaction.
 - Defense in Depth -- multiple layers of security. If one wall fails, another will stand.
 - Zero trust -- slightly different perspective than least privilege. Least privilege = give users the least amount of power to do their job. Zero trust = everyone's a potential terrorist. Scan and monitor everything. Every single request must be authorized
 
 Security Focus areas (appears to be contextualized around secure coding)
 1. Context -- how and why is this app used? What type of data? What is the risk?
 2. Components -- Take the code apart into its modules, libraries, apis... How can we secure these parts?
 3. Connections --  can't explain and I don't think I need to for my purposes.
 4. Code -- Input validation, error handling, Authentication & Authorization, Cryptography in transit / at rest, Least privilege, Secure memory management, don't hard code secrets, security testing, keeping up to date with current standards

https://en.wikipedia.org/wiki/Principle_of_least_privilege
Principle of least privilege
- applies to all accounts, services, apps not just users
- there is an actual non security benefit -- apps that follow this are easier to deploy. As devs have to hand pick which resources to use, certain drivers, installations may not have to be made.
- True least privilege is hard. Its hard to know when exactly a user will need a resource for exactly what thing, so generally a user is given a little more than they may need. Ex. a PC tech can remote into a user machine at any time. Following least privilege,
the pc tech should only be able to do so at a specified time. (This is my example, may not be 100% accurate)

https://en.wikipedia.org/wiki/Zero_trust_security_model
Zero Trust Security Model
 - also known as Perimeterless Security
 - never trust, always verify
 - proposed to be used in areas such as supply chains (of software)

https://www.cyberark.com/what-is/just-in-time-access/
Just in Time Access (JITA)
 - Think of a security admin that can only install apps at 2pm on a certain day after requesting permission. They cannot install at 1pm the same day, or 2pm the next day. The power is only given at the exact time that they need it.

Types of Just intime access
Broker and remove access -  User's connect to targets via a broker. Shared privilege accounts
Ephermal accounts - accounts created on the fly, and then deleted
Temporary elevation - get sudo for a command for 15 minutes to install a software

Example -- Asking a sys admin to give access to a network share. Admin gives access. You upload files. Admin takes share away.

https://www.entitle.io/resources/glossary/just-enough-access
Just Enough Access

Principal in Identity and Access Management (IAM)
 - helps mitigate insider threats

https://venafi.com/blog/how-dynamic-authorization-enables-zero-trust-architecture/
Dynamic Authorizaiton / Access Control

Fundamentals of Zero Trust
-Default Deny
- Access by Policy only
- For data, workloads, users, devices

A dynamic authorization defines the relationship between identities – human identities and machine identities – and the digital assets to be accessed

- To manage dynamic authorizations you need PBACs (Policy based access control(s))

Key elements of an authorization policy

- Identity -- Who / What is trying to access
- Resource -- what is being accessed
- Device -- how is it being access
- Environmental conds -- Time, Date, Location
- Business Policies associated with role of identity
- compliance requirements

 Zero Trust is not just about authenticating and verifying identities. It is also about authorizing these identities to access the resources they are entitled to.

https://www.paloaltonetworks.com/cyberpedia/what-is-microsegmentation
Microsegmentation

A workload is a computational task, process or data transaction.

Microsegmentation refers to an approach to security that involves dividing a network into segments and applying security controls to each segment based on the segment’s requirements.
These granular secure zones isolate workloads, securing them individually with custom, workload-specific policies.

3.4.2

Security Controls https://csrc.nist.gov/glossary/term/security_control
This is just a dictionary page definition of the word security control with 15 refrences to NIST.

Kerberos https://web.mit.edu/kerberos/
A network authentication protocol
Uses Secret Key Cryptography ( type of encryption where a single secret key is used for both encryption and decryption of a message -- This a symmetic protocol )
There is a Free version available from MIT
Talks about how Firewalls are good at stopping securing against outside threats, but not against inside. I am sure there are exceptions for Next Gen stuff...
Kerberos allows secure authentication over an insecure network
Once authenticated via Kerberos, server and client communicate via encryption so can further send data without exposing it to the insecure network (This sounds like it kind of does what a VPN does...)

3.4.3 Shift Left Security 

https://devopedia.org/shift-left
Contextualized around the software development cycle. They try to get a working prototype working first and then worry bout the quality (via testing) later in a traditional waterfall approach.
Shift Left just says, if you do all the testing in the beginning, you won't have to do it at the end as much because everything should be ironed out by release.
Shift Left is also very general -- just means doing a task earlier in a process than regular
Shift Left doesn't mean "shifting" the position of a task within a process flow. It also doesn't imply that no testing is done just before a release. It should be seen as "spreading" the task and its concerns to all stages of the process flow.
Automation has to be implemented to reduce human error

Getting Started with shifting left
- Devs must implement unit tests
- Testers need to learn how to code. Must use same tools as dev as well
  - Can use TDD or BDD to have projects start with testability in mind
  - Test can be written before development even starts


3.4.4 Shamir's Secret Sharing (SSS)
https://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing
- An Algorithm that mathematically splits a secret in x amounts of parts
- Attackers need every share to gain access. Only 1 or two will not do (In SSS of 3 or more)
- Having some of the shares does not make cracking the last shares any easier







