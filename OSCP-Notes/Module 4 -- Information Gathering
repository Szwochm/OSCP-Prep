[x] Critical Finds: https://osintframework.com/ -- Interesting mind map of how to perform OSINT with links to various tools

Note: With this Module I have introduce High Level Questions (HLQ). These point out information in the course I see that would be necessary at a management level... Things that should be known by CEOs, Contractors, Sales reps attempting to sell a product...

[x] # 6. Information Gathering
GOal: Learn how to methodically map such an attack surface using both passive and active means

## 6.1 The Pen Test Lifecycle

Information gathering has a role within every stage of a pentest

HLQ: When should pentests be done? ---------- Routinely and after large shifts to IT architecture

Stages of a pentest
  Defining the Scope
  Information Gathering
  Vulnerability Detection
  Initial Foothold
  Privilege Escalation
  Lateral Movement
  Reporting/Analysis
  Lessons Learned/Remediation

HLQ: What does the scope of a pentest define: ---------- Which IP ranges, hosts, and applications should be test subjects during the engagement, as compared to out-of-scope items that should not be tested.

When we begin information gathering we are initially looking for information on the following things
A ssets
P ersonnel
I nfrastructure

"information gathering (also known as enumeration) does not end after our initial reconnaissance."

 [x] ## 6.2 Passive Information Gathering

Learning Objectives:
Understand the two different Passive Information Gathering approaches
(OSINT)
Web Server and DNS passive information gathering

https://osintframework.com/

The ultimate goal of passive information gathering is to obtain information that clarifies or expands an attack surface
https://cheatsheetseries.owasp.org/cheatsheets/Attack_Surface_Analysis_Cheat_Sheet.html

#6.2.1

https://www.megacorpone.com/ -- one of offsecs domains for PASSIVE Information Gathering
https://www.forbes.com/advisor/business/software/what-is-a-name-server/
https://www.cloudflare.com/learning/dns/glossary/what-is-a-domain-name-registrar/

Whois lookup of a hostname 
whois megacorpone.com -h 192.168.50.251 
(192.168.60.251 is Offsecs WHOIS server... Generally speaking companies WILL NOT have their own WHOIS server This is not a name server. Name servers resolve IPS and Hostnames. WhoIS servers provide information on the registration of domains)

Whois lookup of an Ip (AKA reverse lookup)
whois 38.100.193.70 -h 192.168.50.251

Using this command, they located the IT Admin's Name, and 3 name servers (NS1.MEGACORPONE.COM)

### 6.2.2
intitle:"index of" "parent directory"

This takes you to a basically a file explorer of a page aka Directory Listing, (If it exists and you have permissions) -- CWE-548: Exposure of Information Through Directory Listing

Content-Security-Policy-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP
-- helps detect and mitigate web app attacks

  browsers that do not support csp function as usual defaulting to same-origin policy

  enabled by enabling Content-Security-Policy header on webserver (previously known as x-content-security-policy)


  can also be enabled using

 LEFT BRACKET meta
  http-equiv="Content-Security-Policy"
  content="default-src 'self'; img-src https://*; child-src 'none';" / RIGHT BRACKET

## 6.3. Active Information Gathering

in some cases during a penetration test, we won't have the luxury of running our favorite Kali Linux tool

https://lolbas-project.github.io/ -- you can use lolbas for information gathering, not just exploiting

### 6.3.1 DNS Enumeration

# 6.3.1

Command: host www.megacorpone.com
Gets ip address of a hostname

Command: host -t mx megacorpone.com
-t specifies to view mx records instead of default of A record(s)\

Result:
megacorpone.com mail is handled by 10 fb.mail.gandi.net.
megacorpone.com mail is handled by 20 spool.mail.gandi.net.
megacorpone.com mail is handled by 50 mail.megacorpone.com.
megacorpone.com mail is handled by 60 mail2.megacorpone.com.

Lowest number = first to forward mail

Automating host command

Step 1. Create a list

admin
shop
login
mail


Bash oneliner
Command: for ip in $(cat list.txt); do host $ip.megacorpone.com; done
basically ip is like in python how you can iterate through a list of anything... every line is an $ip. ip is just the name of the "i" variable

https://github.com/danielmiessler/SecLists -- wordlists
sudo apt install seclists -- get said wordlists (1.9 gigs as of 8-11)

Alot to unpack for the next command
Command: for ip in $(seq 200 254); do host 51.222.169.$ip; done | grep -v "not found"

Explanation: 
for i in 200, 201 ... 254
host 51.222.169.i
Pipe to grep -v (remove results that match regex of "not found"

The big picture:
They previously used a word list to try to guess some potential hostnames. Upon finding 2-3 entries that were alive, they discovered a pattern in the IP scheme. Using that pattern they tried doing reverse looksups and seeing what came back.


Tool: DNSRecon
https://github.com/darkoperator/dnsrecon

Command: dnsrecon -d megacorpone.com -t std
-d: Specify domain
-t std: type of enumeration (STanDard

Using a list we created we can do the following...
dnsrecon -d megacorpone.com -D ~/list.txt -t brt
-D: specify input file
-t brt: Brute force

Tool: DNSEnum
Command: dnsenum megacorpone.com

Important concept: The results of the manual, dnsrecon and dnsenum provided 3 different sets of results. (Similar but different) They are trying to show that you should use multiple tools to get information, not just one.
Lolbas connecting to a provided Windows machine
Command: xfreerdp /u:student /p:lab /v:192.x.x.x

On Windows Machine
nslookup -type=TXT info.megacorptwo.com 192.168.50.151
          ^record^  ^target subdomain^   ^dns server^

Lab question notes:
host www.megacorpone.com works
host -t mx megacorpone.com works
host -t mx www.megacorpone.com Does not work....

I also learned that labs can be broken on the first start. nothing worked until I restarted vpn and lab.

### 6.3.2 TCP/UDP Port Scanning Theory

nc -nvv -w 1 -z 192.168.50.152 3388-3390
-n: No Dns lookups
-vv: Increased verbosity (-v is regular)
-w: Time out in seconds
-z Zero i/o mode, sends no data (used for scanning)

talks about the 3 way hand shake and the flags used for scanning

udp:

nc -nv -u -z -w 1 192.168.50.149 120-123

Lab notes: I noticed that with the syntax of the code above, netcat scans from highest to lowest...


### 6.3.3 Port Scanning with Nmap



<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><
Extra Reading   
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><

### 6.3.3 Port Scanning with Nmap
http://nmap.org/
http://man7.org/linux/man-pages/man7/raw.7.html
http://netfilter.org/projects/iptables/index.html
https://tools.kali.org/information-gathering/masscan
https://rustscan.github.io/RustScan/
https://nmap.org/book/scan-methods-connect-scan.html
https://networkprogrammingnotes.blogspot.com/p/berkeley-sockets.html
https://nmap.org/book/scan-methods-udp-scan.html
https://nmap.org/book/nmap-services.html
https://nmap.org/book/man-host-discovery.html
http://nmap.org/book/nse.html
https://nmap.org/book/osdetect.html
https://docs.microsoft.com/en-us/powershell/module/nettcpip/test-netconnection?view=windowsserver2022-ps

6.3.2 TCP/UDP Port Scanning Theory
https://www.barracuda.com/support/glossary/intrusion-detection-system
http://support.microsoft.com/kb/172983

[x] 6.2

https://www.megacorpone.com/
https://osintframework.com/ -- Interesting mind map of how to perform OSINT, critical find

https://cheatsheetseries.owasp.org/cheatsheets/Attack_Surface_Analysis_Cheat_Sheet.html
  Attack Surface Analysis --  The point of Attack Surface Analysis is to understand the risk areas in an application, to make developers and security specialists aware of what parts of the application are open to attack, to find ways of minimizing this, and to notice when and how the Attack Surface changes and what this means from a risk perspective.
  Attack Surface Analysis is usually done by security architects and pen testers
     This helps you do the following:
     Identify what needs to be reviewed or tested
     Identify high risk areas that will need defense in depth implemented
     Identify when you have changed the attack surface and need to do a threat assessment
     Attack Surface for an app is basically all of paths for data / commands into and out of and app, valuable data (Secrets, PII, etc), and code that attempts to protect the former
       Should be done for every user type but focus on how the webapp reacts to unauthenticated anonymous users and highly privileged admin users
       Group types of attacks in buckets based on risk
       Dont need to understand every endpoint. Just use the number of endpoints with their buckets to figure out how much of the budget has to go where

    Attack Surface for Microservices and Cloud Native Applicatios (I think these are basically just web apps)
      User interface (UI) forms and fields 
      HTTP headers and cookies
      APIs
      Files
      Databases
      Other local storage
      Email or other kinds of messages
      Runtime arguments
      ...Your points of entry/exit

    Identify high risk code
      Network-facing, especially internet-facing code
      Web forms
      Files from outside of the network
      Backward compatible interfaces with other systems – old protocols, sometimes old code and libraries, hard to maintain and test multiple versions
      Custom APIs – protocols etc – likely to have mistakes in design and implementation
      Security code: anything to do with cryptography, authentication, authorization (access control) and session management

There are tools for vuln scanning webapps (I don't think any of these are allowed on OSCP)
  - OWASP ZAP 
  - Arachni
  - Skipfish
  - w3af

6.2.1 Whois Enumeration

 https://www.domaintools.com/support/what-is-whois-information-and-why-is-it-valuable/
  
  Whois is a widely used Internet record listing that identifies who owns a domain and how to get in contact with them.
  Whois record changes can take a while (About 24 Hours)
  Not all extensions are equal. dot US do not have the option to privatize their information. ICANN no longer posts details of .ca domains. (However companies must still publicize it)
  
   
  
https://www.forbes.com/advisor/business/software/what-is-a-name-server/
  
  Name servers connect specific URLs with the correct internet protocol (IP) address of the site’s server. (It doesn't mention IPv4 or Ipv6 nor which one specifically)
  Imagine that Name servers are the library, and DNS records are the catalog
  Each webhost has a different process for updating DNS records
  Name servers do not have to be related to the domain
  
  Windows
  
  nslookup
  set q = ns
  <Enter a domain>
  
  for Linux/mac use dig

 https://www.cloudflare.com/learning/dns/glossary/what-is-a-domain-name-registrar/

6.2.2
CSP - https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP

	One main objective of CSP is to mitigate and REPORT xss attacks (how does it report the attacks?)

	XSS attacks exploit the browser's trust in the content received from the server. -- This explanation of XSS is the clearest I've read so far

	CSP reduces or eliminate the vectors by which XSS can occur by specifying the domains that the browser should consider to be valid sources of executable scripts.
	A CSP compatible browser will then only execute scripts loaded in source files received from those allowed domains.

	CSP can specify which protocols are allowed -- example only use HTTPs. Combine this with Secure attribute on cookies. Force redirects from http to https

	Strict-Transport-Security header -- sites force browsers to only connect over encrypted channel

	A policy needs to include a default-src or script-src directive to prevent inline scripts from running, as well as blocking the use of eval()

	default-src or style-src helps protect <style> element or style attribute from inline styles

X-Frame Options -- https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options

	Whether browsers can render Frame, Iframe, embed or object

	CSP has frame-ancestors directive which obsoletes xframes

	Xframe inside meta tag does not work

Server Hardening -- https://csrc.nist.gov/publications/detail/sp/800-123/final

RC4 - https://msrc.microsoft.com/blog/2013/11/security-advisory-2868725-recommendation-to-disable-rc4/

6.3 Active Information Gathering

https://www.cloudflare.com/learning/dns/what-is-dns/

There are 4 Dns servers involved in loading a webpage
- Recursor
- root nameserver -- one of the big 13
- tld nameserver -- .com, .org, .net
- authoratative nameserver -- gives the actual answer

Recursors recieve queries from client machines. This can be via web browser. May make multiple requests to get an answer
Root nameserver -- There are 13 ips associated with root servers

6.3.1

https://github.com/danielmiessler/SecLists -- wordlists

https://www.cloudflare.com/learning/dns/dns-records/dns-ptr-record/

https://www.cloudflare.com/learning/dns/glossary/reverse-dns/

Tool: https://github.com/darkoperator/dnsrecon





